package sce.sc2002.gwhm.lab2a;

import java.util.Scanner;
import java.util.Random; //for case 1

public class sc2002_lab2a {
	public static void main(String[] args)
	{
		int choice;
		Scanner sc = new Scanner(System.in);
		do {
			System.out.println("Perform the following methods:");
			System.out.println("1: miltiplication test");
			System.out.println("2: quotient using division by subtraction");
			System.out.println("3: remainder using division by subtraction");
			System.out.println("4: count the number of digits");
			System.out.println("5: position of a digit");
			System.out.println("6: extract all odd digits");
			System.out.println("7: quit");
			choice = sc.nextInt();
			switch (choice) {
			 case 1: /* add mulTest() call */
				 mulTest();
				 break;
			 case 2: /* add divide() call */
				 Scanner sc2 = new Scanner(System.in);

				 System.out.print("Input value of m: ");
				 int m = sc2.nextInt();
				 System.out.print("Input value of n: ");
				 int n = sc2.nextInt();
				 System.out.println(m + "/" + n + " = " + divide(m,n));
				 break;
			 case 3: /* add modulus() call */
				 Scanner sc3 = new Scanner(System.in);

				 System.out.print("Input value of m: ");
				 int m1 = sc3.nextInt();
				 System.out.print("Input value of n: ");
				 int n1 = sc3.nextInt();
				 int remainder = modulus(m1,n1);
				 System.out.println(m1 + "%" + n1 + " = " + remainder);
				 break;
			 case 4: /* add countDigits() call */
				 Scanner sc4 = new Scanner(System.in);
				 System.out.print("n: ");
				 int value = sc4.nextInt();
				    
				 int digi = countDigits(value);
				      
				 if(digi != -1) System.out.println("Count = " + digi);
				 else System.out.println("Error input!!");
				 break;
			 case 5: /* add position() call */
				 Scanner sc5 = new Scanner(System.in);    
			     System.out.print("n: ");    
			     int v = sc5.nextInt();
			     System.out.println("digit: ");    
			     int digit = sc5.nextInt();
				 System.out.println("position = " + position(v,digit));
				 break;
			 case 6: /* add extractOddDigits() call */
				 Scanner sc6 = new Scanner(System.in);
				 System.out.print("n: ");
				 long input = sc6.nextLong();
				 if(input<0) System.out.println("Error input!!");
				 else System.out.println("oddDigits = " + extractOddDigits(input));
				 break;
			 case 7: System.out.println("Program terminating...");
			}
		}while (choice < 7);
	 }
	
	 /* add method code here */
	//case 1: mulTest()
	public static void mulTest(){
	    Scanner sc2 = new Scanner(System.in);
	    Random rand = new Random();
	    int n = 0; //number of correct answers

	    for(int i=0; i<5; i++){
	      int n1 = rand.nextInt(9) + 1; //range is [1,9]
	      int n2 = rand.nextInt(9) + 1;
	      
	      int ans = n1 * n2;
	      
	      System.out.print("How much is " + n1 + " times " + n2 + "?");
	      int studentAns = sc2.nextInt();
	      
	      if(studentAns == ans){
	        n++;
	      }
	    }
	    
	    System.out.println(n + " answers of out 5 are correct.");
	  }
	//case 2: divide
	public static int divide(int m, int n){
	    int quotient = 0;
	    
	    while(m >= n){
	      m -= n;
	      quotient++;
	    }
	    return quotient;
	  }
	
	//case 3
	public static int modulus(int m, int n){
	    while(m >= n){
	      m -= n;
	    }
	    return m;
	}
	
	//case 4
	public static int countDigits(int input){
	    if(input < 0) return -1;
	    
	    int count = 0;
	    
	    while(input > 0){
	      input /= 10; //removal of the last countDigit
	      count++;
	    }
	    return count;
	}
	
	//case 5: position
	public static int position(int n, int digit){
	    int value=0;
	    int pos = 1;
	    boolean found = false;
	    
	    while(n > 0){
	      value = n % 10; //get last digit from the Number
	      n = n / 10;
	      if(value == digit){
	        found = true;
	        return pos;
	      } 
	      else pos++;
	    }
	    
	    return found? pos:-1;
    }
	
	//case 7:extractodddigits
	public static long extractOddDigits(long n){
	    long oddDigits = 0; //to store odd oddDigits
	    long placeholder = 1;
	    boolean haveOdd = false;
	    
	    while(n>0){
	      long digit = n % 10;
	      n = n / 10;
	      
	      //if odd
	      if(digit % 2 != 0){
	        oddDigits = digit * placeholder + oddDigits;
	        placeholder *= 10; //move up the tens hundreds place
	        haveOdd = true;
	      }
	    }
	    return haveOdd? oddDigits : -1;
	}	
}

	


		